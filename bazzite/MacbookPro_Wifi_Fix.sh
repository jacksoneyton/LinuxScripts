#!/bin/bash

# MacBook Pro WiFi Fix for Bazzite
# Fixes persistent Broadcom WiFi issues on MacBook Pro models (especially 2015)
# 
# This script resolves the issue where WiFi works during installation but
# disappears after reboot, requiring manual 'modprobe brcmfmac' each time.
#
# Compatible with: MacBook Pro 2015 and similar models with BCM43602 chips
# Tested on: Bazzite (Fedora Atomic Desktop)


set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script info
SCRIPT_NAME="MacBook Pro WiFi Fix for Bazzite"
VERSION="1.0"

print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}${SCRIPT_NAME}${NC}"
    echo -e "${BLUE}Version ${VERSION}${NC}"
    echo -e "${BLUE}================================${NC}"
    echo
}

print_info() {
    echo -e "${BLUE}ℹ${NC} $1"
}

print_success() {
    echo -e "${GREEN}✓${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1"
}

check_prerequisites() {
    print_info "Checking prerequisites..."
    
    # Check if running on Bazzite
    if ! grep -q "bazzite" /etc/os-release 2>/dev/null; then
        print_warning "This script is designed for Bazzite. Proceed with caution on other distributions."
        read -p "Continue anyway? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
    
    # Check if running as non-root (we'll use sudo when needed)
    if [[ $EUID -eq 0 ]]; then
        print_error "Please run this script as a regular user (not root). It will use sudo when needed."
        exit 1
    fi
    
    # Check if sudo is available
    if ! command -v sudo >/dev/null 2>&1; then
        print_error "sudo is required but not available."
        exit 1
    fi
    
    # Check for Broadcom WiFi hardware
    print_info "Detecting Broadcom WiFi hardware..."
    if lspci | grep -qi "broadcom.*802.11\|broadcom.*wireless\|broadcom.*network controller"; then
        local broadcom_info=$(lspci | grep -i "broadcom.*\(802.11\|wireless\|network controller\)")
        print_success "Found Broadcom WiFi hardware:"
        echo "   $broadcom_info"
    else
        print_warning "No Broadcom WiFi hardware detected. This script may not be necessary."
        read -p "Continue anyway? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
    
    print_success "Prerequisites check completed"
    echo
}

backup_existing_configs() {
    print_info "Creating backup of existing configurations..."
    
    local backup_dir="/home/$USER/.macbook-wifi-fix-backup-$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$backup_dir"
    
    # Backup existing modprobe configs if they exist
    if [[ -d /etc/modprobe.d ]]; then
        sudo cp -r /etc/modprobe.d "$backup_dir/" 2>/dev/null || true
    fi
    
    # Backup existing modules-load configs if they exist
    if [[ -d /etc/modules-load.d ]]; then
        sudo cp -r /etc/modules-load.d "$backup_dir/" 2>/dev/null || true
    fi
    
    # Backup dracut configs if they exist
    if [[ -d /etc/dracut.conf.d ]]; then
        sudo cp -r /etc/dracut.conf.d "$backup_dir/" 2>/dev/null || true
    fi
    
    print_success "Backup created at: $backup_dir"
    echo
}

detect_blacklist() {
    print_info "Checking for brcmfmac blacklists..."
    
    local blacklist_files=$(find /etc /usr/lib -name "*.conf" -exec grep -l "blacklist.*brcmfmac" {} \; 2>/dev/null || true)
    
    if [[ -n "$blacklist_files" ]]; then
        print_warning "Found brcmfmac blacklisted in:"
        echo "$blacklist_files" | while read -r file; do
            echo "   - $file"
        done
    else
        print_info "No brcmfmac blacklists found"
    fi
    echo
}

create_override_config() {
    print_info "Creating modprobe override configuration..."
    
    sudo mkdir -p /etc/modprobe.d
    
    sudo tee /etc/modprobe.d/99-unblacklist-brcmfmac.conf > /dev/null << 'EOF'
# MacBook Pro WiFi Fix for Bazzite
# This file overrides the brcmfmac blacklist to enable WiFi persistence
# Generated by macbook-wifi-fix script
#
# This overrides /usr/lib/modprobe.d/broadcom-wl-blacklist.conf

# Allow brcmfmac to load normally by overriding the blacklist
install brcmfmac /sbin/modprobe --ignore-install brcmfmac $CMDLINE_OPTS
EOF
    
    print_success "Created /etc/modprobe.d/99-unblacklist-brcmfmac.conf"
}

create_modules_load_config() {
    print_info "Creating modules-load configuration..."
    
    sudo mkdir -p /etc/modules-load.d
    
    echo "# MacBook Pro WiFi Fix - Load brcmfmac at boot" | sudo tee /etc/modules-load.d/macbook-wifi.conf > /dev/null
    echo "brcmfmac" | sudo tee -a /etc/modules-load.d/macbook-wifi.conf > /dev/null
    
    print_success "Created /etc/modules-load.d/macbook-wifi.conf"
}

create_systemd_service() {
    print_info "Creating systemd service for WiFi initialization..."
    
    sudo tee /etc/systemd/system/macbook-wifi.service > /dev/null << 'EOF'
[Unit]
Description=MacBook Pro WiFi Fix - Load brcmfmac and configure Broadcom
After=systemd-modules-load.service
Before=network.target

[Service]
Type=oneshot
ExecStart=/usr/sbin/modprobe brcmfmac
ExecStart=/usr/bin/ujust configure-broadcom-wl
RemainAfterExit=yes
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
EOF
    
    sudo systemctl enable macbook-wifi.service
    print_success "Created and enabled macbook-wifi.service"
}

create_dracut_config() {
    print_info "Creating dracut configuration for initramfs..."
    
    sudo mkdir -p /etc/dracut.conf.d
    
    echo 'install_items+=" /etc/modprobe.d/99-unblacklist-brcmfmac.conf /etc/modules-load.d/macbook-wifi.conf "' | \
        sudo tee /etc/dracut.conf.d/macbook-wifi-fix.conf > /dev/null
    
    print_success "Created /etc/dracut.conf.d/macbook-wifi-fix.conf"
}

apply_kernel_args() {
    print_info "Adding kernel arguments for driver preloading..."
    
    if rpm-ostree kargs --append-if-missing="rd.driver.pre=brcmfmac" > /dev/null 2>&1; then
        print_success "Added kernel argument: rd.driver.pre=brcmfmac"
    else
        print_warning "Failed to add kernel argument (this may be normal)"
    fi
}

main() {
    print_header
    
    echo "This script fixes WiFi persistence issues on MacBook Pro models running Bazzite."
    echo "It resolves the problem where WiFi works during installation but disappears"
    echo "after reboot, requiring manual intervention each time."
    echo
    echo "The script will:"
    echo "• Override the brcmfmac blacklist"
    echo "• Configure automatic module loading"
    echo "• Create a systemd service for WiFi initialization"
    echo "• Update initramfs configuration"
    echo "• Add kernel arguments for driver preloading"
    echo
    
    read -p "Continue with the fix? (Y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Nn]$ ]]; then
        print_info "Aborted by user"
        exit 0
    fi
    
    # Run all the steps
    check_prerequisites
    backup_existing_configs
    detect_blacklist
    create_override_config
    create_modules_load_config
    create_systemd_service
    create_dracut_config
    apply_kernel_args
    
    echo
    print_success "WiFi fix configuration completed successfully!"
    echo
    print_warning "IMPORTANT: You must reboot for changes to take effect."
    echo
    print_info "After reboot, your WiFi should work automatically without manual intervention."
    print_info "If you still have issues, check the systemd service status:"
    echo "   systemctl status macbook-wifi.service"
    echo
    print_info "To verify the fix is working:"
    echo "   lsmod | grep brcmfmac"
    echo "   ip link show | grep wl"
    echo
    
    read -p "Reboot now? (Y/n): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Nn]$ ]]; then
        print_info "Rebooting..."
        sudo reboot
    else
        print_warning "Remember to reboot later for changes to take effect!"
    fi
}

# Handle script interruption
trap 'echo; print_error "Script interrupted"; exit 1' INT TERM

# Run main function
main "$@"
